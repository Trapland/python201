# Операції та оператори

# Аріфметичні
x = 14
y = 6
# Форматований рядок - рядок з плейсхолдерами
res = "x + y = %d" % (x + y)
res = "%d + %d = %f" % (x,y,x + y)
print("x + y = %d" % (x + y))
# оператор "%" є інтерполятором - підставляє значення у плейсхолдери
# ліворуч від нього - рядок (str) з плейсхолдерами по типу %T, де Т -
# позначає тип даних, що підставляється (%d - int, %f - float, %s - str)
# Праворуч - кортеж даних для підстановки. Підстановка іде по порядку -
# "голова" кортежу вставляється у перший незаповнений плейсхолдер
print(res)  
print ("%d - %d = %f" % (x,y,x - y))
print ("%d * %d = %f" % (x,y,x * y))
print ("%d / %d = %f" % (x,y,x / y))    # ділення "/" дає дробовий результат
print ("%d // %d = %f" % (x,y,x // y))  # ділення "//" дає цілий результат
print ("%d ** %d = %f" % (x,y,x ** y))  
print ("%d %% %d = %f" % (x,y,x % y))  # %% - символ "%"
# для функціональних мов поширено, коли однакові оператори,
# для різних операндів дають різні результати

# Умовний оператор - див. basics.py
# Оператори циклу
x = 10
while x > 0:
    print(x)
    x-=1

# цикли-ітератори проходять по кортежу
# для викоритсання імперативних підходів існують генератори послідовних
# кортежів - range
print(range(10)) # range(0, 10) - дані відразу не генеруються

print ("range(10): ", end=' ')
for i in range(10):
    print(i, end=' ')
print()

print ("range(1, 10): ", end=' ')
for i in range(1, 10):
    print(i, end=' ')
print()

# range(start, limit, step): починає з start, додає step, суворо != limit

print ("range(1, 10, 2): ", end=' ')
for i in range(1, 10, 2):
    print(i, end=' ') # 1 3 5 7 9 (через 2)
print()

print ("range(1, 10, -1): ", end=' ')
for i in range(10, 1, -1):
    print(i, end=' ') # 1 3 5 7 9 (через 2)
print()